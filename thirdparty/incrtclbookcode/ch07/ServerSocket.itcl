#====================================================================
# NOTE: This class is exactly the same as the one in Chapter 6
# except all tracing/debug messages have been removed.
#====================================================================

::itcl::class ServerSocket {
  # Class constructor/destructor
  constructor {{port_ 20002}} {}
  destructor {
    catch {close $_socket}
    foreach clientSocket $_activeClients {
      catch {close $clientSocket}
    }
  }

  # Class Methods
  public method activate {command_}
  public method write {sd_ data_}
  public method broadcast {data_}
  private method accept {sd_ address_ port_}
  private method handleClientInput {sd_}
  private method disconnect {sd_}

  # Class Data Members
  private variable _socket
  private variable _activeClients
  private variable _serverFunction
  private variable _active 0
}


#--------------------------------------------------------------------
# CONSTRUCTOR
#
# Description:
#   Open a server socket and register a method to be invoked when
#   clients attempt to connect to the socket.
# 
# Input Parameters:
#   port_: port number to which clients should connect - default
#          value is 20002
#
# Return Values:
#   TCL_OK or TCL_ERROR
#--------------------------------------------------------------------
::itcl::body ServerSocket::constructor {{port_ 20002}} {
  # Open the physical socket.
  if {[catch {
    socket -server [::itcl::code $this accept] $port_
  } _socket]} {
    return -code error
  }
}


#--------------------------------------------------------------------
# PUBLIC METHOD activate
#
# Description:
#   Activate the ServerSocket object.  Clients cannot connect until
#   the server is activated.
#
# Input Parameters:
#   command_: properly scoped method or procedure to invoke for
#             handling client requests
#
# Return Values:
#   None
#--------------------------------------------------------------------
::itcl::body ServerSocket::activate {command_} {
  set _serverFunction $command_
  set _active 1
}


#--------------------------------------------------------------------
# PUBLIC METHOD write
#
# Description:
#   Send data to a specific client.
#
# Input parameters:
#   sd_: client's socket descriptor
#   data_: message to send to the client
#
# Return Values:
#   TCL_OK or TCL_ERROR
#--------------------------------------------------------------------
::itcl::body ServerSocket::write {sd_ data_} {
  if {[catch {puts $sd_ $data_} err]} {
    error $err
  }
}


#--------------------------------------------------------------------
# PUBLIC METHOD broadcast
#
# Description:
#   Broadcast a message to all clients.
#
# Input parameters:
#   data_: message to broadcast
#
# Return Values:
#   TCL_OK or TCL_ERROR
#--------------------------------------------------------------------
::itcl::body ServerSocket::broadcast {data_} {
  foreach client $_activeClients {
    if {[catch {puts $client $data_} err]} {
      error $err
    }
  }
}


#--------------------------------------------------------------------
# PRIVATE METHOD accept
#
# Description:
#   Automatically invoked when a client attempts to connect to the
#   server.  If the server is not activated, close the socket.
#   Otherwise, register the handleClientInput method to be invoked
#   whenever the socket becomes readable.
#
# Input parameters:
#   sd_: client's socket descriptor
#   address_: client's IP address
#   port_: client's port number
#
# Return Values:
#   None
#--------------------------------------------------------------------
::itcl::body ServerSocket::accept {sd_ address_ port_} {
  # Close the socket if the server's not activated yet. This causes
  # the ClientSocket object to delete itself.
  if {!$_active} {
    close $sd_
    return
  }

  # Configure the socket to automatically flush when newline
  # characters are detected and set up a callback method to be
  # invoked when the socket becomes readable.
  fconfigure $sd_ -buffering line
  fileevent $sd_ readable [::itcl::code $this handleClientInput $sd_]

  puts $sd_ "registration requested"
}


#--------------------------------------------------------------------
# PRIVATE METHOD handleClientInput
#
# Description:
#   Automatically invoked when the socket becomes readable. Handles
#   all client requests, including handshaking and forwarding to an
#   outside source for processing.
#
# Input parameters:
#   sd_: client's socket descriptor
#
# Return Values:
#   None
#--------------------------------------------------------------------
::itcl::body ServerSocket::handleClientInput {sd_} {
  if {[catch {gets $sd_ data} rc]} {
    disconnect $sd_
    return
  }

  if {$rc > 0} {
    if {$data == "register me"} {
      puts $sd_ "connection established"
      lappend _activeClients $sd_
    } else {
      # Make sure this client is already registered.
      if {[lsearch $_activeClients $sd_] == -1} {
        close $sd_
      } else {
        # Send the request to the server function.
        eval $_serverFunction [list $data] $sd_
      }
    }
  } else {
    # Client end of socket has been closed. Close this side
    # and remove the client from the active list.
    disconnect $sd_
  }
}


#--------------------------------------------------------------------
# PRIVATE METHOD disconnect
#
# Description:
#   Evaluate the designated procedure or method that a client has
#   been lost, close the socket, and remove the client from the list
#   of active clients.
#
# Input parameters:
#   sd_: client's socket descriptor
#
# Return Values:
#   None
#--------------------------------------------------------------------
::itcl::body ServerSocket::disconnect {sd_} {
  # This is a hook to notify any attached servers that this
  # socket descriptor is corrupted or has been closed.
  eval $_serverFunction disconnectingSocket $sd_

  set index [lsearch $_activeClients $sd_]
  set _activeClients [lreplace $_activeClients $index $index]
  close $sd_
}
